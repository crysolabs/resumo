// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           Role      @default(USER)

  accounts      Account[]
  sessions      Session[]
  resumes       Resume[]
  coverLetters  CoverLetter[]
  subscription  Subscription?
  transactions  Transaction[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resume {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     Json
  fileUrl     String?
  fileId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId
  aiGenerated Boolean  @default(false)
  aiScore     Int?     @default(0)
  downloads   Int      @default(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CoverLetter {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     Json
  fileUrl     String?
  fileId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId
  aiGenerated Boolean  @default(false)
  company     String?
  position    String?
  downloads   Int      @default(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  userId             String             @unique @db.ObjectId
  stripeCustomerId   String?            @unique
  stripeSubscriptionId String?          @unique
  stripePriceId      String?
  stripeCurrentPeriodEnd DateTime?
  plan               SubscriptionPlan   @default(FREE)
  status             SubscriptionStatus @default(INACTIVE)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  userId           String           @db.ObjectId
  amount           Float
  currency         String
  status           TransactionStatus
  stripeSessionId  String?
  stripePaymentId  String?
  createdAt        DateTime         @default(now())
  description      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum SubscriptionPlan {
  FREE
  PRO
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

